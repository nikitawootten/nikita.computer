[{"content":"This site is very much a work-in-progress, so check back later, you may find something interesting :)\n","date":"29 May 2022","permalink":"/","section":"","summary":"This site is very much a work-in-progress, so check back later, you may find something interesting :)","title":""},{"content":"","date":"29 May 2022","permalink":"/tags/ansible/","section":"Tags","summary":"","title":"ansible"},{"content":"","date":"29 May 2022","permalink":"/tags/dotfiles/","section":"Tags","summary":"","title":"dotfiles"},{"content":"","date":"29 May 2022","permalink":"/tags/git/","section":"Tags","summary":"","title":"git"},{"content":"Configuration management is hard. I first started to get serious about managing my dotfiles when I started college. Before that, I\u0026rsquo;d treat the configuration of my machines as a big ball of mud. You start off with a shiny new system, and as you install more and more software, you start to accumulate these things that effect your workflow in mysterious ways. Every time I\u0026rsquo;d find a weird workaround or neat alias to put in my .bashrc, I\u0026rsquo;d just leave it there to be forgotten the next time I started over with a shiny new system. Worse yet, as I graduated to working with a laptop, a desktop, and even a server, my configuration became a distributed big ball of mud.\nConsolidating and codifying all of my configuration into a single source of truth has helped me immensely in several ways:\nI do not get confused by changes between my machines. I can trust that the same aliases and utilities will be with me wherever I go. I do not have to fear \u0026ldquo;starting over\u0026rdquo;. If I accidentally wipe my laptop, or get a new machine, I can be back to working minutes after installing Linux. I get all the benefits of revision control. If I\u0026rsquo;m tinkering with a configuration file and something breaks, I can tell exactly what I changed and when I changed it. My dotfiles journey # But first, a bit about the things I tried before settling on my current system.\nFirst attempt # My first attempt at managing my dotfiles involved a bash script that precariously symlinked files from my dotfiles repository:\n... # this could be pretty dangerous cp -rfs $(pwd)/dotfiles/. ~/ ... This approach definitely beat having nothing in place, but it still had problems. My laptop and desktop machines at the time had vastly different configurations, including different software, desktop environments, and even different Linux distros.\nI needed an approach that lended itself well to having multiple machines with some distinct configuration.\nSecond attempt: grouping configuration files together and GNU Stow # Stow is a symlink manager that can be used pretty easily to manage dotfiles. With Stow, I could group my configuration files for a given piece of software or a machine into its own directory, and apply it all at once.\nStow improved my dotfiles management workflow a lot. Under this new workflow I had configuration specific to each machine, as well as specific configuration for different pieces of software. I could have separate configuration for i3 or bspwm, without polluting my environment on a given machine with both files if I wasn\u0026rsquo;t planning on having it installed.\nThe problem, is that although my configuration files are managed with Stow, there is a lot more to a running system\u0026rsquo;s state, such as:\nWhat services are enabled and running? What packages are installed? What operating system is installed? I needed a solution that manages all aspects of the state of a given machine.\nIntroducing Ansible # Ansible is a really powerful tool that can be used to automate all sorts of systems.\nAnsible is built on a principle of idempotentcy, meaning if Ansible is run twice, the second run should not break the changes that were made the first time. This is a great fit for dotfiles. As my system evolves, I can commit a change on one system, distribute it to the other machines, and update their configuration without worrying about things breaking.\nOrganizing capabilities into Ansible roles # Like I had with Stow, Ansible allows you to group together reusable pieces of configuration into roles. Under the roles/ directory, I could have specific configurations for a given capability I want that machine to have.\nFor example, I have a Git role that:\nInstalls Git Configures Git Altogether the role looks like this:\n# .dotfiles/roles/git/tasks/main.yaml - name: Install Git ansible.builtin.package: name: - git state: present become: yes - name: Configure Git ansible.builtin.shell: | git config --global user.name \u0026#34;Nikita Wootten\u0026#34; git config --global user.email \u0026lt;REDACTED\u0026gt; git config --global core.editor vim git config --global fetch.prune true git config --global pull.rebase false Note: I omitted some lines that I use to check if the Git configuration changed after being updated. The full configuration is here.\nRoles can also depend on other roles, ensuring for example that the role that the role that sets up my Yubikey/GPG configuration is run before the role that sets up my SSH client configuration.\nThe dotfiles role # Many of my roles depend on a small utility I wrote that mimics Stow with Ansible.\nThe dotfiles role (which you can see here) scans a role for configuration files, and symlinks to resulting files to the appropriate location.\nMy ZSH role can then ensure all of my ZSH configuration has made it by invoking the dotfiles role:\n# .dotfiles/roles/zsh/tasks/main.yaml ... - name: Symlink zsh dotfiles include_role: name: dotfiles ... System playbooks # At the root of my dotfiles repository I have playbooks set up for each of my machines. Each playbook includes the roles which define the capabilities I need for the machine.\nMy laptop\u0026rsquo;s configuration looks like this:\n# .dotfiles/casper-magi.yaml --- - name: Set up casper-magi hosts: localhost roles: - zsh - docker - ssh-client - git - yubikey - update-script The update-script role # The update-script role is another utility role I wrote which creates a script that can be run to update the machine. This role prevents me from accidentally running the wrong playbook after setting up a machine. On subsequent updates I only have to run dotfiles-update.\nTying it all together # Check out my dotfiles here.\n","date":"29 May 2022","permalink":"/posts/dotfiles/","section":"Posts","summary":"Configuration management is hard.","title":"How I manage my dotfiles with Ansible"},{"content":"","date":"29 May 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"29 May 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]